find_package(PostgreSQL REQUIRED)

set (yeti_SRCS
	yeti.cpp
	CdrList.cpp
	ProfilesCache.cpp
	PgConnectionPool.cpp
	CdrWriter.cpp
	SqlRouter.cpp
	DbConfig.cpp
)

SET(yeti_config_files
	etc/yeti.cfg.dist
)
INSTALL(FILES etc/yeti.conf.dist etc/oodprofile.yeti.conf DESTINATION ${SEMS_CFG_PREFIX}/etc/sems/etc)
INSTALL(PROGRAMS yetictl DESTINATION ${SEMS_EXEC_PREFIX}/sbin)


INCLUDE_DIRECTORIES(../..)	#relative path to SBC headers

SET(sems_module_libs -lpqxx)
SET(sems_module_name yeti)

IF(EXISTS ${CMAKE_SOURCE_DIR}/.git)
  FIND_PACKAGE(Git)
  IF(GIT_FOUND)
    EXECUTE_PROCESS(  COMMAND ${GIT_EXECUTABLE} rev-parse HEAD WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE "BUILD_VERSION" ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
  ELSE(GIT_FOUND)
    SET(BUILD_VERSION 0)
  ENDIF(GIT_FOUND)
ENDIF(EXISTS ${CMAKE_SOURCE_DIR}/.git)

EXECUTE_PROCESS( COMMAND "date" OUTPUT_VARIABLE "BUILD_DATE" ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE) 
EXECUTE_PROCESS( COMMAND "whoami" OUTPUT_VARIABLE "BUILD_USER" ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE) 

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/Version.h @ONLY)

INCLUDE(${CMAKE_SOURCE_DIR}/cmake/module.rules.txt)
